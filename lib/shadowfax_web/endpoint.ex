defmodule ShadowfaxWeb.Endpoint do
  use Phoenix.Endpoint, otp_app: :shadowfax

  # The session will be stored in the cookie and signed,
  # this means its contents can be read but not tampered with.
  # Set :encryption_salt if you would also like to encrypt it.
  @session_options [
    store: :cookie,
    key: "_shadowfax_key",
    signing_salt: "/9ZeHtGj",
    same_site: "Lax"
  ]

  socket "/socket", ShadowfaxWeb.UserSocket,
    websocket: true,
    longpoll: false

  # Serve at "/" the static files from "priv/static" directory.
  #
  # When code reloading is disabled (e.g., in production),
  # the `gzip` option is enabled to serve compressed
  # static files generated by running `phx.digest`.
  plug Plug.Static,
    at: "/",
    from: :shadowfax,
    gzip: not code_reloading?,
    only: ShadowfaxWeb.static_paths()

  # Code reloading can be explicitly enabled under the
  # :code_reloader configuration of your endpoint.
  if code_reloading? do
    plug Phoenix.Ecto.CheckRepoStatus, otp_app: :shadowfax
  end

  plug Plug.RequestId
  plug Plug.Telemetry, event_prefix: [:phoenix, :endpoint]

  plug Plug.Parsers,
    parsers: [:urlencoded, :multipart, :json],
    pass: ["*/*"],
    json_decoder: Phoenix.json_library()

  plug Plug.MethodOverride
  plug Plug.Head
  plug Plug.Session, @session_options

  # CORS Configuration
  # Uses allowed origins from config (dev/prod specific)
  plug CORSPlug,
    origin: Application.compile_env(:shadowfax, [:cors, :origins], []),
    max_age: Application.compile_env(:shadowfax, [:cors, :max_age], 86400),
    methods: ["GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"],
    headers: [
      "Authorization",
      "Content-Type",
      "Accept",
      "Origin",
      "User-Agent",
      "DNT",
      "Cache-Control",
      "X-Mx-ReqToken",
      "Keep-Alive",
      "X-Requested-With",
      "If-Modified-Since",
      "X-CSRF-Token"
    ],
    expose: ["Content-Type", "Content-Length", "Authorization"]

  plug ShadowfaxWeb.Router
end
